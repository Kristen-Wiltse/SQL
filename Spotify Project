# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--WHO SANG THE LONGEST SONG? 

SELECT artist_name,MAX(duration_ms)
FROM Spotifydata
GROUP BY artist_name
LIMIT 1;

--WHAT IS THE AVERAGE DANCIBILTY BY ARTIST AND TRACK?

SELECT AVG (danceability),artist_name,track_name
FROM Spotifydata
GROUP BY artist_name, track_name;

--WHAT IS THE TOP 10 ARTIST WITH THE LOUDEST SONGS?

SELECT artist_name
FROM Spotifydata
WHERE artist_name IN(
    SELECT artist_name
    FROM Spotifydata
    ORDER BY loudness desc
    LIMIT 10);

--CATEGORIZE THE ARTIST BY POPULARITY.

SELECT artist_name, popularity,
CASE WHEN popularity>=90
THEN 'Very Popular'
WHEN popularity>=85
THEN 'Popular'
WHEN popularity>=80
THEN 'Average'
ELSE 'Not Popular'
END AS 'Popularity'
FROM Spotifydata
ORDER BY popularity desc;

--WHAT IS THE MOST POPULAR SONG? 

SELECT artist_name,MAX(popularity)
FROM Spotifydata
GROUP BY artist_name
ORDER BY popularity desc
LIMIT 1;
